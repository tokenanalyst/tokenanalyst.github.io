{"version":3,"file":"static/webpack/static/development/pages/_app.js.6a75993667c4aaa6f57e.hot-update.js","sources":["webpack:///./components/atomic/molecules/MetricsNav/MetricsNav.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Popover, Position, Icon } from '@blueprintjs/core';\nimport find from 'lodash/find';\n\nimport { TabDesktop } from '../../atoms/TabDesktop';\nimport { TabMobile } from '../../atoms/TabMobile';\n\nexport const MetricsNav = ({ tabs }) => {\n  const router = useRouter();\n  const { route } = router;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const activeTab = find(tabs, o => o.route === route);\n\n  return (\n    <>\n      <div className=\"tabs\">\n        <div className=\"container-desktop\">\n          {tabs.map(tab => {\n            const isSelected = tab.route.includes(route);\n            const { text, route, link } = tab;\n\n            return (\n              <TabDesktop\n                key={text}\n                text={text}\n                route={route}\n                link={link}\n                selected={isSelected}\n              />\n            );\n          })}\n        </div>\n        <div className=\"container-mobile\">\n          <Popover isOpen={isMenuOpen} minimal position={Position.BOTTOM}>\n            <div\n              className=\"mobile-selected-metric\"\n              onClick={() => setIsMenuOpen(status => !status)}\n              onKeyDown={() => setIsMenuOpen(status => !status)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              <div className=\"mobile-selected-metric-icon\">\n                <Icon\n                  icon={isMenuOpen ? 'chevron-up' : 'chevron-down'}\n                  iconSize={20}\n                />\n              </div>\n              <div>\n                <TabMobile\n                  key={activeTab.text}\n                  text={activeTab.text}\n                  link={activeTab.link}\n                  selected\n                  disabled\n                />\n              </div>\n            </div>\n\n            <div className=\"mobile-menu-list\">\n              {tabs.map(tab => {\n                const { text, link } = tab;\n\n                return (\n                  <div className=\"mobile-menu-item\" key={text}>\n                    <TabMobile\n                      key={text}\n                      text={text}\n                      link={link}\n                      selected={text !== activeTab.text}\n                      onClick={() => setIsMenuOpen(status => !status)}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </Popover>\n        </div>\n      </div>\n      <style jsx>\n        {`\n          .tabs {\n            margin-top: 10px;\n            margin-right: -10px;\n            margin-left: -10px;\n            padding-bottom: 10px;\n            border-bottom: 1px solid rgba(151, 151, 151, 0.15);\n          }\n          .container-desktop {\n            display: flex;\n            margin-right: 20px;\n            margin-left: 20px;\n          }\n          .container-mobile {\n            display: none;\n            margin-right: 10px;\n            margin-left: 10px;\n          }\n          .mobile-selected-metric {\n            display: flex;\n          }\n          .mobile-selected-metric-icon {\n            padding-right: 5px;\n          }\n          .mobile-menu-list {\n            display: flex;\n            flex-direction: column;\n            padding-top: 20px;\n            padding-bottom: 10px;\n            padding-left: 20px;\n            padding-right: 20px;\n            background-color: white;\n          }\n          .mobile-menu-item {\n            padding-bottom: 5px;\n          }\n          @media only screen and (max-width: 769px) {\n            .container-desktop {\n              display: none;\n            }\n            .container-mobile {\n              display: flex;\n            }\n          }\n        `}\n      </style>\n    </>\n  );\n};\n\nMetricsNav.propTypes = {\n  tabs: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nMetricsNav.defaultProps = {};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAWA;AA3DA;AAAA;AAAA;AADA;AAkHA;AAEA;AACA;AADA;AAIA;;;;A","sourceRoot":""}