{"version":3,"file":"static/chunks/1.js","sources":["webpack:///./components/atomic/organism/ProChart/ProChart.js","webpack:///./components/atomic/organism/ProChart/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport moment from 'moment';\n\nlet tvWidget = null;\n\nconst ProChart = ({ kaikoService, tradingViewOptions, onChartRenderCb }) => {\n  useEffect(() => {\n    tvWidget = new TradingView.widget(tradingViewOptions);\n\n    tvWidget.onChartReady(() => {\n      const chart = tvWidget.chart();\n      chart.setVisibleRange({\n        from: 1583020800,\n        to: 1585699200,\n      });\n      onChartRenderCb(tvWidget);\n\n      // Fired when the intervall is changed. We then set the time range shown on screen,\n      // so for example, the last 2 hours\n\n      chart.onIntervalChanged().subscribe(null, (interval, obj) => {\n        const now = moment();\n        switch (obj.timeframe) {\n          case '2h': {\n            const twoHoursBefore = now.subtract(2, 'hours').valueOf();\n            chart.setVisibleRange({\n              from: 1583020800,\n              to: 1585699200,\n            });\n            break;\n          }\n          case '6h': {\n            const sixHoursBefore = now.subtract(6, 'hours').valueOf();\n            chart.setVisibleRange({\n              from: 1583020800,\n              to: 1585699200,\n            });\n            break;\n          }\n          case '1d': {\n            const oneDayBefore = now.subtract(1, 'days').valueOf();\n            chart.setVisibleRange({\n         from: 1583020800,\n        to: 1585699200,\n            });\n            break;\n          }\n          default:\n        }\n      });\n    });\n    return () => {\n      if (tvWidget !== null) {\n        tvWidget.remove();\n        tvWidget = null;\n      }\n    };\n  }, [tradingViewOptions, kaikoService, onChartRenderCb]);\n\n  return (\n    <div>\n      <div id={tradingViewOptions.container_id} className=\"tvCharContainer\">\n        <style jsx>\n          {`\n            .tvCharContainer {\n              height: calc(100vh - 130px);\n            }\n          `}\n        </style>\n      </div>\n    </div>\n  );\n};\n\nProChart.propTypes = {\n  kaikoService: PropTypes.objectOf(\n    PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  ).isRequired,\n  onChartRenderCb: PropTypes.func,\n  tradingViewOptions: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.bool,\n      PropTypes.string,\n      PropTypes.array,\n    ])\n  ).isRequired,\n};\n\nProChart.defaultProps = {\n  onChartRenderCb: () => null,\n};\n\nexport default ProChart;\n","export { default } from './ProChart';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AACA;AACA;AACA;AAGA;AACA;AALA;AAeA;AACA;AAAA;AAAA;AADA;AAIA;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}